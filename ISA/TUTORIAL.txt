1. FILES DESCRIPTION

*.hex: Contains Poxim-V memory instructions and data in hexadecimal 
format, along with the starting memory address.
*.out: The expected output generated by the simulator. Please see the OUTPUT 
file for more information.
*.s: Assembly source code for Poxim-V, to be compiled into hexadecimal 
(machine code) format.
INFO: Minimal architecture description.
Makefile: Contains the rules for compiling and simulating Poxim-V source code.
Makefile.toolchain: Required to download and build all necessary tools 
for Poxim-V.
OUTPUT: Describes how each instruction should be output, including 
address, mnemonic, and operands.
poxim-v.gdb: GDB script for step-by-step execution of instructions, 
providing full debugging output.
poxim-v.ld: Linker script that defines memory origin and length, as well 
as program segments and their permissions.
poxim-v.s: Minimal assembly source code for bare-metal simulation, 
including semihosting and trap handling.
riscv*.pdf: Official RISC-V documentation for further details.

Note: Please place all files in the same directory (POXIM-V_ROOT).

2. BUILDING TOOLCHAIN

Poxim-V Toolchain is a set of tools used to compile RISC-V source code into 
machine code (via GCC) and to simulate its execution instruction by 
instruction, generating an output (using GDB and QEMU). To facilitate this 
process, the Makefile.toolchain is provided to automate all steps, including 
downloading the necessary tools and checking for dependencies. A minimal set of 
development tools must be installed on the host system. Please verify the 
required packages using your Linux distribution's package manager. The following 
steps demonstrate how to use the toolchain (using Bash terminal notation) and 
what results to expect.

2.1. Avaliable build options

[user@host POXIM-V_ROOT]$ make -f Makefile.toolchain

  _____   _____  _     _ _____ _______     _    _
 |_____] |     |  \___/    |   |  |  | ___  \  / 
 |       |_____| _/   \_ __|__ |  |  |       \/  
 
 A 32 bit (ilp32) RISC-V (imzicsr) compatible ISA

Available options:
- build: build the toolchain for Poxim-V
- clean: remove all built and downloaded files

2.2. Downloading and compiling toolchain

[user@host POXIM-V_ROOT]$ make -f Makefile.toolchain build
# How many CPU cores should be used? (1-[8]): 
> Retrieving required sources
binutils-2.44.tar.xz
######################################################################### 100.0%
gcc-15.1.0.tar.xz
######################################################################### 100.0%
newlib-4.5.0.20241231.tar.gz
######################################################################### 100.0%
gdb-16.3.tar.xz
######################################################################### 100.0%
qemu-10.0.0.tar.xz
######################################################################### 100.0%
> Building toolchain for Poxim-V (8 cores)
  > binutils 2.44
  > bootstrap gcc 15.1.0
  > newlib 4.5.0.20241231
  > gcc 15.1.0
  > gdb 16.3
  > qemu 10.0.0
> Install directory: poxim-v

In this step, all required files are downloaded, and the building process for 
GCC and QEMU is initiated. Some dependencies must be installed on the host 
system, so the user should check their package manager for installation 
instructions. Additionally, this phase may take a long time to complete, so 
please be patient. Once all steps are successfully finished, a subdirectory 
called poxim-v will be created, containing the GCC and QEMU binaries.

3. BUILDING AND SIMULATING PROJECTS

After the toolchain is built and installed, you can compile and simulate 
assembly source code files using the Makefile. This will generate binary files 
(ELF and HEX) and execute the simulation using QEMU.

3.1. Avaliable build and execution options

[user@host POXIM-V_ROOT]$ make

  _____   _____  _     _ _____ _______     _    _
 |_____] |     |  \___/    |   |  |  | ___  \  / 
 |       |_____| _/   \_ __|__ |  |  |       \/  
 
 A 32 bit (ilp32) RISC-V (imzicsr) compatible ISA

Available options:
- build: build all sources to ELF and hex files
- run  : simulate project using QEMU
- clean: remove generated files

3.2. Building assembly source files

All source files with the 1_*.s, 2_*.s, and 3_*.s prefix patterns will 
be automatically compiled if needed. An expected output is shown below:

[user@host POXIM-V_ROOT]$ make build
--------------------------------------------------------------------------------
1_empty.elf <- 1_empty.s
1_empty.hex <- 1_empty.elf
--------------------------------------------------------------------------------
1_factorial.elf <- 1_factorial.s
1_factorial.hex <- 1_factorial.elf
--------------------------------------------------------------------------------
1_mul_div_rem.elf <- 1_mul_div_rem.s
1_mul_div_rem.hex <- 1_mul_div_rem.elf
--------------------------------------------------------------------------------

3.3. Executing simulation using GDB + QEMU

By using the GDB script (poxim-v.gdb), the project's machine code is executed 
step by step in the QEMU simulator, generating detailed output in the terminal. 
The PROJECT option must be used to specify which project should be executed, as 
shown below:

[user@host POXIM-V_ROOT]$ make run PROJECT=1_empty
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
|ra=0x00000000|sp=0x00000000|fp=0x00000000|gp=0x00000000|tp=0x00000000                                                                                      |
|t0=0x80000000|t1=0x00000000|t2=0x00000000|t3=0x00000000|t4=0x00000000|t5=0x00000000|t6=0x00000000                                                          |
|a0=0x00000000|a1=0x80200000|a2=0x00001028|a3=0x00000000|a4=0x00000000|a5=0x00000000|a6=0x00000000|a7=0x00000000                                            |
|s1=0x00000000|s2=0x00000000|s3=0x00000000|s4=0x00000000|s5=0x00000000|s6=0x00000000|s7=0x00000000|s8=0x00000000|s9=0x00000000|s10=0x00000000|s11=0x00000000|
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
|pc=0x80000000|mstatus=0x00000000|mie=0x00000000|mtvec=0x00000000|mepc=0x00000000|mcause=0x00000000|mtval=0x00000000|mip=0x00000080                         |
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
> 0x80000000 <_start_text>:     j       0x800000a0 <_start>
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
|ra=0x00000000|sp=0x00000000|fp=0x00000000|gp=0x00000000|tp=0x00000000                                                                                      |
|t0=0x80000000|t1=0x00000000|t2=0x00000000|t3=0x00000000|t4=0x00000000|t5=0x00000000|t6=0x00000000                                                          |
|a0=0x00000000|a1=0x80200000|a2=0x00001028|a3=0x00000000|a4=0x00000000|a5=0x00000000|a6=0x00000000|a7=0x00000000                                            |
|s1=0x00000000|s2=0x00000000|s3=0x00000000|s4=0x00000000|s5=0x00000000|s6=0x00000000|s7=0x00000000|s8=0x00000000|s9=0x00000000|s10=0x00000000|s11=0x00000000|
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
|pc=0x800000a0|mstatus=0x00000000|mie=0x00000000|mtvec=0x00000000|mepc=0x00000000|mcause=0x00000000|mtval=0x00000000|mip=0x00000080                         |
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
> 0x800000a0 <_start>:  auipc   sp,0x8
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
.
.
.
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
> 0x80000090 <_semihost>:       slli    zero,zero,0x1f
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
|ra=0x80000080|sp=0x80007ff0|fp=0x00000000|gp=0x00000000|tp=0x00000000                                                                                      |
|t0=0x80000000|t1=0x00000000|t2=0x00000000|t3=0x00000000|t4=0x00000000|t5=0x00000000|t6=0x00000000                                                          |
|a0=0x00000020|a1=0x80007ff0|a2=0x00001028|a3=0x00000000|a4=0x00000000|a5=0x00000000|a6=0x00000000|a7=0x00000000                                            |
|s1=0x00000000|s2=0x00000000|s3=0x00000000|s4=0x00000000|s5=0x00000000|s6=0x00000000|s7=0x00000000|s8=0x00000000|s9=0x00000000|s10=0x00000000|s11=0x00000000|
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
|pc=0x80000094|mstatus=0x00000000|mie=0x00000000|mtvec=0x00000000|mepc=0x00000000|mcause=0x00000000|mtval=0x00000000|mip=0x00000080                         |
 ----------------------------------------------------------------------------------------------------------------------------------------------------------- 
> 0x80000094 <_semihost+4>:     ebreak
[Inferior 1 (process 1) exited normally]
 -----------------------------------------------------------------------------------------------------------------------------------------------------------
